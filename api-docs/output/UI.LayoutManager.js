Ext.data.JsonP.UI_LayoutManager({"tagname":"class","name":"UI.LayoutManager","autodetected":{},"files":[{"filename":"analysis.js","href":null}],"since":"3.0.2","members":[{"name":"contentInset","tagname":"property","owner":"UI.LayoutManager","id":"property-contentInset","meta":{"android":true,"ios":true}},{"name":"scrollDirection","tagname":"property","owner":"UI.LayoutManager","id":"property-scrollDirection","meta":{"android":true,"ios":true}},{"name":"spanCount","tagname":"property","owner":"UI.LayoutManager","id":"property-spanCount","meta":{"android":true,"ios":true}},{"name":"onFullSpan","tagname":"event","owner":"UI.LayoutManager","id":"event-onFullSpan","meta":{"android":true,"ios":true}},{"name":"onItemLength","tagname":"event","owner":"UI.LayoutManager","id":"event-onItemLength","meta":{"android":true,"ios":true}},{"name":"targetContentOffset","tagname":"event","owner":"UI.LayoutManager","id":"event-targetContentOffset","meta":{"ios":true}}],"alternateClassNames":[],"aliases":{},"id":"class-UI.LayoutManager","short_doc":"Layout calculation class for GridView. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><div class='doc-contents'><p>Layout calculation class for GridView. It behaves iOS’s UICollectionViewFlowLayout and Android’s StaggeredGridLayout.</p>\n\n<p>spanCount and scrollDirection are 2 important parameters of this class.</p>\n\n<p>If user sets scrollDirection to “vertical”, spanCount represents count of colons.\nFor example; scrollDirection: vertical, spanCount: 2 means user can scroll vertically, object has 2 colons and width property of items are fixed numbers depends on colon count.\nIf user sets scrollDirection to “horizontal”, spanCount represents count of rows.\nFor example; scrollDirection: horizontal, spanCount : 2 means user can scroll horizontally, object has 2 rows and height property of items are fixed numbers depends on row count</p>\n\n<pre class='inline-example '><code>var layoutManager = new LayoutManager({\n      spanCount: 2,\n      scrollDirection: LayoutManager.ScrollDirection.VERTICAL\n });\n</code></pre>\n        <p>Available since: <b>3.0.2</b></p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-contentInset' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='UI.LayoutManager'>UI.LayoutManager</span><br/></div><a href='#!/api/UI.LayoutManager-property-contentInset' class='name expandable'>contentInset</a> : Number<span class=\"signature\"><span class='android' >android</span><span class='ios' >iOS</span></span></div><div class='description'><div class='short'>Gets/sets the custom distance that the content view is inset from the scroll view edges. ...</div><div class='long'><p>Gets/sets the custom distance that the content view is inset from the scroll view edges.</p>\n<p>Defaults to: <code>{top:0, left:0, bottom:0, right:0}</code></p>        <p>Available since: <b>3.0.2</b></p>\n</div></div></div><div id='property-scrollDirection' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='UI.LayoutManager'>UI.LayoutManager</span><br/></div><a href='#!/api/UI.LayoutManager-property-scrollDirection' class='name expandable'>scrollDirection</a> : LayoutManager.ScrollDirection<span class=\"signature\"><span class='android' >android</span><span class='ios' >iOS</span></span></div><div class='description'><div class='short'>The scroll direction of GridView. ...</div><div class='long'><p>The scroll direction of GridView.</p>\n<p>Defaults to: <code>0</code></p>        <p>Available since: <b>3.0.2</b></p>\n</div></div></div><div id='property-spanCount' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='UI.LayoutManager'>UI.LayoutManager</span><br/></div><a href='#!/api/UI.LayoutManager-property-spanCount' class='name expandable'>spanCount</a> : Number<span class=\"signature\"><span class='android' >android</span><span class='ios' >iOS</span></span></div><div class='description'><div class='short'>Gets/sets colon or row count depends on scrolling direction of layout. ...</div><div class='long'><p>Gets/sets colon or row count depends on scrolling direction of layout.\nIf vertical it represents colon, if horizontal it represent row count.</p>\n<p>Defaults to: <code>1</code></p>        <p>Available since: <b>3.0.2</b></p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-event'>Events</h3><div class='subsection'><div id='event-onFullSpan' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='UI.LayoutManager'>UI.LayoutManager</span><br/></div><a href='#!/api/UI.LayoutManager-event-onFullSpan' class='name expandable'>onFullSpan</a>( <span class='pre'>itemType</span> )<span class=\"signature\"><span class='android' >android</span><span class='ios' >iOS</span></span></div><div class='description'><div class='short'>This event used to define specified gridview item  to fully occupy width/height  based on direction. ...</div><div class='long'><p>This event used to define specified gridview item  to fully occupy width/height  based on direction. According to direction return value must be either desired height or width of gridview item. If the direction\nis <a href=\"#!/api/UI.LayoutManager.ScrollDirection-static-property-VERTICAL\" rel=\"UI.LayoutManager.ScrollDirection-static-property-VERTICAL\" class=\"docClass\">VERTICAL</a> then return value must be height or vice versa. Returning undefined indicates that\nthe gridview item will not modified.</p>\n        <p>Available since: <b>4.0.1</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>itemType</span> : Number<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>height/width</p>\n</div></li></ul></div></div></div><div id='event-onItemLength' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='UI.LayoutManager'>UI.LayoutManager</span><br/></div><a href='#!/api/UI.LayoutManager-event-onItemLength' class='name expandable'>onItemLength</a>( <span class='pre'>itemLength</span> )<span class=\"signature\"><span class='android' >android</span><span class='ios' >iOS</span></span></div><div class='description'><div class='short'>User must return a length value for scrollDirection that user lays out the objects. ...</div><div class='long'><p>User must return a length value for scrollDirection that user lays out the objects.\nIf vertical, length value will be height of item. If horizontal, length value will be width of item.</p>\n        <p>Available since: <b>3.0.2</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>itemLength</span> : Number<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>itemLength</p>\n</div></li></ul></div></div></div><div id='event-targetContentOffset' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='UI.LayoutManager'>UI.LayoutManager</span><br/></div><a href='#!/api/UI.LayoutManager-event-targetContentOffset' class='name expandable'>targetContentOffset</a>( <span class='pre'>proposedContentOffset, velocity</span> )<span class=\"signature\"><span class='ios' >iOS</span></span></div><div class='description'><div class='short'>If you want the scrolling behavior to snap to specific boundaries, you can override this method and use it to change ...</div><div class='long'><p>If you want the scrolling behavior to snap to specific boundaries, you can override this method and use it to change the point at which to stop.\nFor example, you might use this method to always stop scrolling on a boundary between items, as opposed to stopping in the middle of an item.For Android, you can use <a href=\"#!/api/UI.GridView-property-snapToAlignment\" rel=\"UI.GridView-property-snapToAlignment\" class=\"docClass\">UI.GridView.snapToAlignment</a>.</p>\n\n<pre class='inline-example '><code>//For Left Span \n layoutManager.ios.targetContentOffset = function(proposedContentOffset, velocity){\n     var positionX = gridView.contentOffset.x / ITEM_LENGHT;\n     var decimalPositionX = parseInt(positionX);\n     var precisionPositionX = positionX % 1;\n\n     if (Math.abs(velocity.x) &lt;= 0.5 &amp;&amp; precisionPositionX &gt;= 0.5) {\n         decimalPositionX++;\n     }\n     else if (velocity.x &gt; 0) {\n         decimalPositionX++;\n     }\n\n     return { x: decimalPositionX * ITEM_LENGHT, y: 0 };\n };\n</code></pre>\n        <p>Available since: <b>3.2.0</b></p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>proposedContentOffset</span> : Object<div class='sub-desc'><p>This is the value at which scrolling would naturally stop if no adjustments were made.</p>\n<ul><li><span class='pre'>x</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'>\n</div></li></ul></div></li><li><span class='pre'>velocity</span> : Object<div class='sub-desc'><p>The current scrolling velocity along both the horizontal and vertical axes. This value is measured in points per second.</p>\n<ul><li><span class='pre'>x</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'>\n</div></li></ul></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The content offset that you want to use instead. The default implementation of this method returns the value in the proposedContentOffset parameter.</p>\n<ul><li><span class='pre'>x</span> : Number<div class='sub-desc'>\n</div></li><li><span class='pre'>y</span> : Number<div class='sub-desc'>\n</div></li></ul></div></li></ul></div></div></div></div></div></div></div>","meta":{}});